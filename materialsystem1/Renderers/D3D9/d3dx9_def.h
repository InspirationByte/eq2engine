//////////////////////////////////////////////////////////////////////////////////
// Copyright © Inspiration Byte
// 2009-2020
//////////////////////////////////////////////////////////////////////////////////
// Description: Constant types for Equilibrium renderer
//////////////////////////////////////////////////////////////////////////////////

#ifndef D3DRENDERER_CONSTANTS_H
#define D3DRENDERER_CONSTANTS_H

static const D3DBLEND blendingConsts[] = {
	D3DBLEND_ZERO,
	D3DBLEND_ONE,
	D3DBLEND_SRCCOLOR,
	D3DBLEND_INVSRCCOLOR,
	D3DBLEND_DESTCOLOR,
	D3DBLEND_INVDESTCOLOR,
	D3DBLEND_SRCALPHA,
	D3DBLEND_INVSRCALPHA,
	D3DBLEND_DESTALPHA,
	D3DBLEND_INVDESTALPHA,
	D3DBLEND_SRCALPHASAT,
};

static const D3DBLENDOP blendingModes[] = {
	D3DBLENDOP_ADD,
	D3DBLENDOP_SUBTRACT,
	D3DBLENDOP_REVSUBTRACT,
	D3DBLENDOP_MIN,
	D3DBLENDOP_MAX,
};

static const D3DCMPFUNC depthConst[] = {
	D3DCMP_NEVER,
	D3DCMP_LESS,
	D3DCMP_EQUAL,
	D3DCMP_LESSEQUAL,
	D3DCMP_GREATER,
	D3DCMP_NOTEQUAL,
	D3DCMP_GREATEREQUAL,
	D3DCMP_ALWAYS,
};

static const D3DSTENCILOP stencilConst[] = {
	D3DSTENCILOP_KEEP,
	D3DSTENCILOP_ZERO,
	D3DSTENCILOP_REPLACE,
	D3DSTENCILOP_INVERT,
	D3DSTENCILOP_INCR,
	D3DSTENCILOP_DECR,
	D3DSTENCILOP_INCRSAT,
	D3DSTENCILOP_DECRSAT,
};

static const D3DCULL cullConst[] = {
	D3DCULL_NONE,
	D3DCULL_CCW,
	D3DCULL_CW,
};

static const D3DFILLMODE fillConst[] = {
	D3DFILL_SOLID,
	D3DFILL_WIREFRAME,
	D3DFILL_POINT,
};

extern D3DFORMAT formats[];

static const D3DDECLTYPE d3ddecltypes[][4] = {
	D3DDECLTYPE_FLOAT1, D3DDECLTYPE_FLOAT2,    D3DDECLTYPE_FLOAT3, D3DDECLTYPE_FLOAT4,
	D3DDECLTYPE_UNUSED, D3DDECLTYPE_FLOAT16_2, D3DDECLTYPE_UNUSED, D3DDECLTYPE_FLOAT16_4,
	D3DDECLTYPE_UNUSED, D3DDECLTYPE_UNUSED,    D3DDECLTYPE_UNUSED, D3DDECLTYPE_UBYTE4N,
};

static const D3DDECLUSAGE d3dvertexusage[] = {
	(D3DDECLUSAGE) (-1), 
	D3DDECLUSAGE_COLOR,
	D3DDECLUSAGE_POSITION, 
	D3DDECLUSAGE_TEXCOORD,
	D3DDECLUSAGE_NORMAL,
	D3DDECLUSAGE_TANGENT,
	D3DDECLUSAGE_BINORMAL,
};

static const DWORD d3dbufferusages[] = {
	D3DUSAGE_DYNAMIC,
	0,
	D3DUSAGE_DYNAMIC,
};

const D3DPRIMITIVETYPE d3dPrim[] = {
	D3DPT_TRIANGLELIST,
	D3DPT_TRIANGLEFAN,
	D3DPT_TRIANGLESTRIP,
	(D3DPRIMITIVETYPE) 0, // Quads not supported
	D3DPT_LINELIST,
	D3DPT_LINESTRIP,
	(D3DPRIMITIVETYPE) 0, // Line loops not supported
	D3DPT_POINTLIST,
};

static PRIMCOUNTER s_DX9PrimitiveCounterFunctions[] = 
{
	PrimCount_TriangleList,
	PrimCount_TriangleFanStrip,
	PrimCount_TriangleFanStrip,
	PrimCount_None,
	PrimCount_ListList,
	PrimCount_ListStrip,
	PrimCount_None,
	PrimCount_Points,
	PrimCount_None,
};

const D3DTEXTUREFILTERTYPE d3dFilterType[] = {
    D3DTEXF_POINT,
    D3DTEXF_LINEAR,
	D3DTEXF_LINEAR,
	D3DTEXF_LINEAR,
    D3DTEXF_ANISOTROPIC,
	D3DTEXF_ANISOTROPIC,
};

const D3DTEXTUREADDRESS d3dAddressMode[] = {
	D3DTADDRESS_WRAP,
	D3DTADDRESS_CLAMP,
	D3DTADDRESS_MIRROR
};

const D3DTRANSFORMSTATETYPE d3dmatrixmodes[] = {
	D3DTS_VIEW,
	D3DTS_PROJECTION,
	D3DTS_WORLD,
	D3DTS_WORLD1,
	D3DTS_TEXTURE0
};

inline bool HasMipmaps(ER_TextureFilterMode filter)
{
    return (filter >= TEXFILTER_BILINEAR);
}
inline bool HasAniso(ER_TextureFilterMode filter)
{
    return (filter >= TEXFILTER_BILINEAR_ANISO);
}

#endif //D3DRENDERER_CONSTANTS_H