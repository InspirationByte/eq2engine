#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = -I../../FileSystem -I../../Engine -I../../public -I../../public/core -I../../public/platform -I../../public/materialsystem/renderers
CFLAGS = -g -m32 `pkg-config gl --cflags` -DLINUX -DCORE_EXPORT -DDLL_EXPORT -DRENDER_EXPORT -DIS_OPENGL
RESINC = 
LIBDIR = -L../../libs
LIB = -lcoreLib -lPrevLib -lz -ljpeg -leqCore
LDFLAGS = 

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2 -DNDEBUG
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS)
OBJDIR_RELEASE = .objs
DEP_RELEASE = 
OUT_RELEASE = ../../../gamebin_linux/libeqGLRHI.so

OBJ_RELEASE = $(OBJDIR_RELEASE)/GL/VertexBufferGL.o $(OBJDIR_RELEASE)/GL/CGLTexture.o $(OBJDIR_RELEASE)/GL/GLMeshBuilder.o $(OBJDIR_RELEASE)/GL/GLOcclusionQuery.o $(OBJDIR_RELEASE)/GL/GLShaderProgram.o $(OBJDIR_RELEASE)/GL/IndexBufferGL.o $(OBJDIR_RELEASE)/GL/ShaderAPIGL.o $(OBJDIR_RELEASE)/GL/CGLRenderLib.o $(OBJDIR_RELEASE)/GL/VertexFormatGL.o $(OBJDIR_RELEASE)/GL/gl_caps.o $(OBJDIR_RELEASE)/GL/glx_caps.o $(OBJDIR_RELEASE)/ShaderAPI_Base.o $(OBJDIR_RELEASE)/CTexture.o

all: release

clean: clean_release

before_release: 
	test -d ../../../gamebin_linux || mkdir -p ../../../gamebin_linux 
	test -d $(OBJDIR_RELEASE)/GL || mkdir -p $(OBJDIR_RELEASE)/GL 
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE) 

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) -shared $(LIBDIR_RELEASE) $(OBJ_RELEASE)  -o $(OUT_RELEASE) $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/GL/VertexBufferGL.o: GL/VertexBufferGL.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/VertexBufferGL.cpp -o $(OBJDIR_RELEASE)/GL/VertexBufferGL.o

$(OBJDIR_RELEASE)/GL/CGLTexture.o: GL/CGLTexture.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/CGLTexture.cpp -o $(OBJDIR_RELEASE)/GL/CGLTexture.o

$(OBJDIR_RELEASE)/GL/GLMeshBuilder.o: GL/GLMeshBuilder.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/GLMeshBuilder.cpp -o $(OBJDIR_RELEASE)/GL/GLMeshBuilder.o

$(OBJDIR_RELEASE)/GL/GLOcclusionQuery.o: GL/GLOcclusionQuery.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/GLOcclusionQuery.cpp -o $(OBJDIR_RELEASE)/GL/GLOcclusionQuery.o

$(OBJDIR_RELEASE)/GL/GLShaderProgram.o: GL/GLShaderProgram.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/GLShaderProgram.cpp -o $(OBJDIR_RELEASE)/GL/GLShaderProgram.o

$(OBJDIR_RELEASE)/GL/IndexBufferGL.o: GL/IndexBufferGL.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/IndexBufferGL.cpp -o $(OBJDIR_RELEASE)/GL/IndexBufferGL.o

$(OBJDIR_RELEASE)/GL/ShaderAPIGL.o: GL/ShaderAPIGL.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/ShaderAPIGL.cpp -o $(OBJDIR_RELEASE)/GL/ShaderAPIGL.o

$(OBJDIR_RELEASE)/GL/CGLRenderLib.o: GL/CGLRenderLib.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/CGLRenderLib.cpp -o $(OBJDIR_RELEASE)/GL/CGLRenderLib.o

$(OBJDIR_RELEASE)/GL/VertexFormatGL.o: GL/VertexFormatGL.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/VertexFormatGL.cpp -o $(OBJDIR_RELEASE)/GL/VertexFormatGL.o

$(OBJDIR_RELEASE)/GL/gl_caps.o: GL/gl_caps.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/gl_caps.cpp -o $(OBJDIR_RELEASE)/GL/gl_caps.o

$(OBJDIR_RELEASE)/GL/glx_caps.o: GL/glx_caps.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c GL/glx_caps.cpp -o $(OBJDIR_RELEASE)/GL/glx_caps.o

$(OBJDIR_RELEASE)/ShaderAPI_Base.o: ShaderAPI_Base.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c ShaderAPI_Base.cpp -o $(OBJDIR_RELEASE)/ShaderAPI_Base.o

$(OBJDIR_RELEASE)/CTexture.o: CTexture.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -std=c++11 -c CTexture.cpp -o $(OBJDIR_RELEASE)/CTexture.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf ../../../gamebin_linux
	rm -rf $(OBJDIR_RELEASE)/GL
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_release after_release clean_release

