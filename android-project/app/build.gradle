def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

def eqEnginePath = file('../..').absolutePath
def makefilePath = eqEnginePath + '/jni/Application.mk'

//noinspection GroovyAssignabilityCheck
task ndkBuildRelease(type: Exec) {
    println "buildNative Application.mk"

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkDir = properties.getProperty('ndk.dir', null)
    if (ndkDir == null)
        throw new FileNotFoundException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    commandLine "$ndkDir/ndk-build.cmd",
            "NDK_PROJECT_PATH="+eqEnginePath,
            "NDK_APPLICATION_MK="+makefilePath
}

tasks.whenTaskAdded { task ->
    //if (task.name == 'compileDebugJava') {
    //    task.dependsOn ndkBuildDebug
    //} else if (task.name == 'compileReleaseJava') {
    task.dependsOn ndkBuildRelease
    //}
}

android {
    compileSdkVersion 26
    defaultConfig {
        if (buildAsApplication) {
            applicationId = "com.insbyte.driversyndicate"
        }
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir '../../libs_android'
            jni.srcDirs = []
        }


    }
    lintOptions {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
